// Code generated by mockery v2.32.0. DO NOT EDIT.

package storagemocks

import (
	domain "github.com/ferminhg/learning-go/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AdServiceRepository is an autogenerated mock type for the AdServiceRepository type
type AdServiceRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: _a0
func (_m *AdServiceRepository) Find(_a0 uuid.UUID) (domain.Ad, bool) {
	ret := _m.Called(_a0)

	var r0 domain.Ad
	var r1 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.Ad, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Ad); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Ad)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ad
func (_m *AdServiceRepository) Save(ad domain.Ad) error {
	ret := _m.Called(ad)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Ad) error); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: maxNumber
func (_m *AdServiceRepository) Search(maxNumber int) ([]domain.Ad, error) {
	ret := _m.Called(maxNumber)

	var r0 []domain.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Ad, error)); ok {
		return rf(maxNumber)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Ad); ok {
		r0 = rf(maxNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(maxNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdServiceRepository creates a new instance of AdServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdServiceRepository {
	mock := &AdServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
